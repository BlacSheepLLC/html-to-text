{"version":3,"sources":["../node_modules/striptags/src/striptags.js","utils.js","index.js"],"names":["compose","fns","reduce","f","g","blocks","unparsable","preprocess","html","removeTextStyling","replace","removeUnparsableElements","element","RegExp","removeSilentElements","parseLinks","parseImages","breakOnBlocks","block","removeExtraBreakLines","removeBlocks","parseListItems","replaceSpaces","removeLeadingNewLines","removeTrailingNewLines","removeAllNonTagsToBreakOn","convertTagsToBreak","removeIndentation","htmlToText"],"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","file":"html-to-text.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n(function (global) {\n\n    // minimal symbol polyfill for IE11 and others\n    if (typeof Symbol !== 'function') {\n        var Symbol = function(name) {\n            return name;\n        }\n\n        Symbol.nonNative = true;\n    }\n\n    const STATE_PLAINTEXT = Symbol('plaintext');\n    const STATE_HTML      = Symbol('html');\n    const STATE_COMMENT   = Symbol('comment');\n\n    const ALLOWED_TAGS_REGEX  = /<(\\w*)>/g;\n    const NORMALIZE_TAG_REGEX = /<\\/?([^\\s\\/>]+)/;\n\n    function striptags(html, allowable_tags, tag_replacement) {\n        html            = html || '';\n        allowable_tags  = allowable_tags || [];\n        tag_replacement = tag_replacement || '';\n\n        let context = init_context(allowable_tags, tag_replacement);\n\n        return striptags_internal(html, context);\n    }\n\n    function init_striptags_stream(allowable_tags, tag_replacement) {\n        allowable_tags  = allowable_tags || [];\n        tag_replacement = tag_replacement || '';\n\n        let context = init_context(allowable_tags, tag_replacement);\n\n        return function striptags_stream(html) {\n            return striptags_internal(html || '', context);\n        };\n    }\n\n    striptags.init_streaming_mode = init_striptags_stream;\n\n    function init_context(allowable_tags, tag_replacement) {\n        allowable_tags = parse_allowable_tags(allowable_tags);\n\n        return {\n            allowable_tags : allowable_tags,\n            tag_replacement: tag_replacement,\n\n            state         : STATE_PLAINTEXT,\n            tag_buffer    : '',\n            depth         : 0,\n            in_quote_char : ''\n        };\n    }\n\n    function striptags_internal(html, context) {\n        let allowable_tags  = context.allowable_tags;\n        let tag_replacement = context.tag_replacement;\n\n        let state         = context.state;\n        let tag_buffer    = context.tag_buffer;\n        let depth         = context.depth;\n        let in_quote_char = context.in_quote_char;\n        let output        = '';\n\n        for (let idx = 0, length = html.length; idx < length; idx++) {\n            let char = html[idx];\n\n            if (state === STATE_PLAINTEXT) {\n                switch (char) {\n                    case '<':\n                        state       = STATE_HTML;\n                        tag_buffer += char;\n                        break;\n\n                    default:\n                        output += char;\n                        break;\n                }\n            }\n\n            else if (state === STATE_HTML) {\n                switch (char) {\n                    case '<':\n                        // ignore '<' if inside a quote\n                        if (in_quote_char) {\n                            break;\n                        }\n\n                        // we're seeing a nested '<'\n                        depth++;\n                        break;\n\n                    case '>':\n                        // ignore '>' if inside a quote\n                        if (in_quote_char) {\n                            break;\n                        }\n\n                        // something like this is happening: '<<>>'\n                        if (depth) {\n                            depth--;\n\n                            break;\n                        }\n\n                        // this is closing the tag in tag_buffer\n                        in_quote_char = '';\n                        state         = STATE_PLAINTEXT;\n                        tag_buffer   += '>';\n\n                        if (allowable_tags.has(normalize_tag(tag_buffer))) {\n                            output += tag_buffer;\n                        } else {\n                            output += tag_replacement;\n                        }\n\n                        tag_buffer = '';\n                        break;\n\n                    case '\"':\n                    case '\\'':\n                        // catch both single and double quotes\n\n                        if (char === in_quote_char) {\n                            in_quote_char = '';\n                        } else {\n                            in_quote_char = in_quote_char || char;\n                        }\n\n                        tag_buffer += char;\n                        break;\n\n                    case '-':\n                        if (tag_buffer === '<!-') {\n                            state = STATE_COMMENT;\n                        }\n\n                        tag_buffer += char;\n                        break;\n\n                    case ' ':\n                    case '\\n':\n                        if (tag_buffer === '<') {\n                            state      = STATE_PLAINTEXT;\n                            output    += '< ';\n                            tag_buffer = '';\n\n                            break;\n                        }\n\n                        tag_buffer += char;\n                        break;\n\n                    default:\n                        tag_buffer += char;\n                        break;\n                }\n            }\n\n            else if (state === STATE_COMMENT) {\n                switch (char) {\n                    case '>':\n                        if (tag_buffer.slice(-2) == '--') {\n                            // close the comment\n                            state = STATE_PLAINTEXT;\n                        }\n\n                        tag_buffer = '';\n                        break;\n\n                    default:\n                        tag_buffer += char;\n                        break;\n                }\n            }\n        }\n\n        // save the context for future iterations\n        context.state         = state;\n        context.tag_buffer    = tag_buffer;\n        context.depth         = depth;\n        context.in_quote_char = in_quote_char;\n\n        return output;\n    }\n\n    function parse_allowable_tags(allowable_tags) {\n        let tag_set = new Set();\n\n        if (typeof allowable_tags === 'string') {\n            let match;\n\n            while ((match = ALLOWED_TAGS_REGEX.exec(allowable_tags))) {\n                tag_set.add(match[1]);\n            }\n        }\n\n        else if (!Symbol.nonNative &&\n                 typeof allowable_tags[Symbol.iterator] === 'function') {\n\n            tag_set = new Set(allowable_tags);\n        }\n\n        else if (typeof allowable_tags.forEach === 'function') {\n            // IE11 compatible\n            allowable_tags.forEach(tag_set.add, tag_set);\n        }\n\n        return tag_set;\n    }\n\n    function normalize_tag(tag_buffer) {\n        let match = NORMALIZE_TAG_REGEX.exec(tag_buffer);\n\n        return match ? match[1].toLowerCase() : null;\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(function module_factory() { return striptags; });\n    }\n\n    else if (typeof module === 'object' && module.exports) {\n        // Node\n        module.exports = striptags;\n    }\n\n    else {\n        // Browser\n        global.striptags = striptags;\n    }\n}(this));\n","const compose = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));\n\nexport { compose };\n","import striptags from 'striptags';\nimport { compose } from './utils';\n\nconst blocks = [\n  'p',\n  'div',\n  'br',\n  'hr',\n  'title',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'ol',\n  'ul',\n  'li',\n  'pre',\n  'table',\n  'th',\n  'td',\n  'blockquote',\n  'header',\n  'footer',\n  'nav',\n  'section',\n  'summary',\n  'aside',\n  'article',\n  'address',\n  'code',\n  'img',\n];\n\nconst unparsable = [\n  'audio',\n  'iframe',\n  'map',\n  'progress',\n  'track',\n  'meter',\n  'object',\n  'svg',\n  'wbr',\n  'video',\n  'webview',\n  'dialog',\n  'canvas',\n];\n\nconst preprocess = html => {\n  return html;\n};\n\nconst removeTextStyling = html => html.replace(/<(\\/)?(b|i|strong|em|font|sup|sub|small|del)>/g, '');\n\nconst removeUnparsableElements = html => {\n  for (const element of unparsable) {\n    html = html.replace(new RegExp(`<${element}(.+?)?>(.+?)?<\\/${element}>`, 'g'), '');\n    html = html.replace(new RegExp(`<${element}(.+?)?\\/>`, 'g'), '');\n    html = html.replace(new RegExp(`<${element}(.+?)>`, 'g'), '');\n  }\n  return html;\n};\n\n// Remove all the elements that don't really matter\nconst removeSilentElements = html => html.replace(/<(\\/)?(ul|ol|span)+(.*?)>/g, '');\n\nconst parseLinks = html => {\n  // First parse all links that have some text\n  html = html.replace(/<a(.+?)href=\"(.+?)\"(.+?)?>(.+?)<\\/a>/g, '$4 ($2)');\n\n  // Remove all those that doesn't\n  return html.replace(/<a(.+?)href=\"(.+?)\"(.+?)?>(.*?)<\\/a>/g, '');\n};\n\nconst parseImages = html => {\n  // Parse images where the alt property is before the src one\n  html = html.replace(/<img(.+?)alt=\"(.+?)\"(.+?)src=\"(.+?)\"(.*?)>/gm, 'Image: $2 ($4)');\n\n  // Parse images where the alt property is after the src one\n  html = html.replace(/<img(.+?)src=\"(.+?)\"(.+?)alt=\"(.+?)\"(.*?)>/gm, 'Image: $4 ($2)');\n\n  // Parse images where no alt property was provided\n  html = html.replace(/<img(.+?)src=\"(.+?)\"(.*?)>/gm, 'Image: $2');\n\n  return html;\n};\n\nconst breakOnBlocks = html => {\n  for (const block of blocks) {\n    html = html.replace(new RegExp(`<\\/${block}>`, 'gm'), `</${block}>\\n`);\n  }\n  return html;\n};\n\nconst removeExtraBreakLines = html => html.replace(/(\\n\\n)+/gm, '\\n');\n\nconst removeBlocks = html => {\n  for (const block of blocks) {\n    html = html.replace(new RegExp(`<${block}(.*?)>`, 'gm'), '');\n    html = html.replace(new RegExp(`<\\/${block}(.*?)>`, 'gm'), '');\n  }\n  return html;\n};\n\nconst parseListItems = html => {\n  // Parse list items that are not empty first\n  html = html.replace(/<li(.*?)>(.+?)<\\/li>/gm, '* $2\\n');\n\n  // Remove the empty ones\n  return html.replace(/<li(.*?)>(.*?)<\\/li>/gm, '');\n};\n\nconst replaceSpaces = html => html.replace(/&nbsp;/gm, ' ');\n\nconst removeLeadingNewLines = html => html.replace(/\\n+$/, '');\n\nconst removeTrailingNewLines = html => html.replace(/^\\n+/, '');\n\nconst removeAllNonTagsToBreakOn = html => striptags(html, blocks);\nconst convertTagsToBreak = html => striptags(html, [], '\\n');\n\nconst removeIndentation = html => html.replace(/(^\\t+)/gm, '');\n\nconst htmlToText = compose(\n  removeIndentation,\n\n  convertTagsToBreak,\n  removeAllNonTagsToBreakOn,\n\n  //removeExtraBreakLines,\n  removeLeadingNewLines,\n  removeTrailingNewLines,\n\n  removeBlocks,\n  breakOnBlocks,\n\n  parseImages,\n  parseListItems,\n  parseLinks,\n\n  replaceSpaces,\n  removeTextStyling,\n  removeSilentElements,\n  removeUnparsableElements,\n\n  preprocess,\n);\n\nexport default htmlToText;\n"]}